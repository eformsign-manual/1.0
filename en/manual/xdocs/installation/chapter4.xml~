<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="chapter4" xml:lang="en"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>eformsign Installation and Configuration</title>

  <para>This chapter describes how to install eformsign and configure its
  properties.</para>

  <note>
    <para>To install and run eformsign, the web server, WAS, and DB must be
    installed beforehand.</para>

    <para>For information about how to install them, refer to <xref
    linkend="chapter3"/>.</para>
  </note>

  <section xml:id="eformsign_install">
    <title>Installing eformsign</title>

    <para>This section describes how to install eformsign.</para>

    <section>
      <title>Pre-installation Tasks</title>

      <para>Copy the default configuration file by executing the following
      command.</para>

      <para><programlisting>$ mkdir /opt/eformsign
$ cd /opt/eformsign
// Copy the compressed file you received to the current folder. '10,2020,0429,300' is the build version and the file name may vary.
$ cp Onpremise-10,2020,0429,300.zip
</programlisting></para>
    </section>

    <section xml:base="" xml:id="eformsign_unzip">
      <title>Extracting eformsign</title>

      <para>Extract the<emphasis role="bold">
      Onpremise-10,2020,0429,300.zip</emphasis> file by executing the
      following command.</para>

      <note>
        <para>10,2020,0429,300 is the build version and the file name may
        differ.</para>
      </note>

      <para><programlisting>$ unzip Onpremise-10,2020,0429,300.zip</programlisting></para>
    </section>

    <section xml:base="" xml:id="storage_config">
      <title>Configuring the Storage</title>

      <para>Configure the storage to be used by eformsign.</para>

      <para><programlisting>$ cd /opt
$ mkdir storage
$ chown -R tomcat:tomcat storage/
$ chmod -R 750 storage/
$ cd storage
$ unzip /opt/eformsign/storagefiles.zip
</programlisting></para>
    </section>

    <section xml:base="" xml:id="upzip">
      <title>Extracting Daemon, Iam, and Service</title>

      <para>Create a folder in webapps in Tomcat and extract the
      Daemon<indexterm class="singular">
          <primary>Daemon</primary>
        </indexterm>, Iam<indexterm class="singular">
          <primary>Iam</primary>
        </indexterm>, and Service<indexterm class="singular">
          <primary>Service</primary>
        </indexterm> files.</para>

      <para>The method of extraction differs for each OS.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7</para>

          <para><programlisting>$ cd /opt/tomcat/webapps/
$ rm -rf *
$ mkdir Daemon Iam Service
$ chown -R tomcat:tomcat *
$ chmod –R 750 *
$ cd Daemon
$ unzip /opt/eformsign/Daemon-10,2020,0429,300.war
$ cd ../Iam
$ unzip /opt/eformsign/Iam-10,2020,0429,300.war
$ cd ../Service
$ unzip /opt/eformsign/Service-10,2020,0429,300.war
</programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ cd /var/lib/tomcat/webapps
$ rm -rf *
$ mkdir Daemon Iam Service
$ chown -R tomcat:tomcat *
$ chmod –R 750 *
$ cd Daemon
$ unzip /opt/eformsign/Daemon-10,2020,0429,300.war
$ cd ../Iam
$ unzip /opt/eformsign/Iam-10,2020,0429,300.war
$ cd ../Service
$ unzip /opt/eformsign/Service-10,2020,0429,300.war
</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /opt/tomcat/latest/webapps/
$ rm -rf *
$ mkdir Daemon Iam Service
$ chown -R tomcat:tomcat *
$ chmod –R 750 *
$ cd Daemon
$ unzip /opt/eformsign/Daemon-10,2020,0429,300.war
$ cd ../Iam
$ unzip /opt/eformsign/Iam-10,2020,0429,300.war
$ cd ../Service
$ unzip /opt/eformsign/Service-10,2020,0429,300.war
</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>

    <section xml:base="" xml:id="server_stop">
      <title>Stopping the Servers</title>

      <para>To configure the server environments, stop the web server, WAS,
      and DB server that are installed and running.</para>

      <para><programlisting>$ service nginx stop
$ service tomcat stop
$ service couchdb stop</programlisting></para>
    </section>
  </section>

  <section xml:id="encoding">
    <title>Encryption Settings</title>

    <para>Encrypt your account and generate encryption key files.</para>

    <section xml:id="rs256">
      <title>Encrypting Your Account and Generating Key Files</title>

      <para>Encrypt your account by executing the following command and write
      a memo of the result. The information of the encrypted account will be
      displayed and the key files, RS256.private<indexterm class="singular">
          <primary>RS256.private</primary>
        </indexterm>and RS256.pub<indexterm class="singular">
          <primary>RS256.pub</primary>
        </indexterm>, will be generated.</para>

      <para><programlisting>$ cd /opt/eformsign
$ java -jar eformsignGen.jar init
Enter couchdb ID : CouchDB ID
Enter couchdb Password : CouchDB PW
Enter email ID : email ID
Enter email Password : email PW
</programlisting></para>
    </section>
  </section>

  <section xml:id="db_config">
    <title>Configuring CouchDB</title>

    <para>eformsign's data can be stored and managed in a DB by configuring
    CouchDB<indexterm class="singular">
        <primary>CouchDB</primary>
      </indexterm>.</para>

    <section>
      <title>Creating the init-data Folder and Copying CouchDB Files</title>

      <para>Create the init-data<indexterm class="singular">
          <primary>init-data</primary>
        </indexterm> folder and copy CouchDB files to the eformsign
      folder.</para>

      <para><programlisting>$ cd /opt/couchdb
$ mkdir init-data
$ cd init-data/
$ cp /opt/eformsign/eformsign-couchdb-* .
</programlisting></para>
    </section>

    <section>
      <title>Extracting Files</title>

      <para>Extract CouchDB files by executing the following command.</para>

      <para><programlisting>$ tar -zxvf eformsign-couchdb-default-data.tar.gz</programlisting></para>
    </section>

    <section>
      <title>Copying the Configuration File</title>

      <para>Copy the default configuration file by executing the following
      commands.</para>

      <para><programlisting>$ cp eformsign-couchdb-backup eformsign-couchdb-default-data
$ cp eformsign-couchdb-restore eformsign-couchdb-default-data
$ cd eformsign-couchdb-default-data
</programlisting></para>
    </section>

    <section>
      <title>Modifying the eformsign-couchdb-restore File</title>

      <para>Modify the eformsign-couchdb-restore<indexterm class="singular">
          <primary>eformsign-couchdb-restore</primary>
        </indexterm> file by executing the following command.</para>

      <para><programlisting>$ vi eformsign-couchdb-restore
./eformsign-couchdb-backup -r -H localhost -d $filename -f $f -u admin -p password -q -c  // Enter couchdbID, couchdbPW in admin, password
</programlisting></para>
    </section>

    <section>
      <title>Granting Execution Permission</title>

      <para>Grant execution permission for CouchDB.</para>

      <para><programlisting>$ chmod +x eformsign-couchdb-*</programlisting></para>
    </section>

    <section>
      <title>Executing the Script</title>

      <para>Restart CouchDB.</para>

      <para><programlisting>$ service couchdb restart
$ curl -X PUT http://admin:password@localhost:8308/_users // Enter couchdbID:couchdbPW in admin:password.
$ curl -X PUT http://admin:password@localhost:8308/_replicator // Enter couchdbID:couchdbPW in admin:password.
$ ./eformsign-couchdb-restore
</programlisting></para>
    </section>
  </section>

  <section xml:id="iam_config">
    <title>Configuring Iam</title>

    <para>Iam<indexterm class="singular">
        <primary>Iam</primary>
      </indexterm> server is a server that manages user accounts in the Oauth
    method. Configure it in the following order.</para>

    <section xml:base="" xml:id="iam_foldercopy">
      <title>Go to the Iam/WEB-INF Folder</title>

      <para>Go to the WEB-INF folder in Iam by executing the following command
      for each OS.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7</para>

          <para><programlisting>$ cd /opt/tomcat/webapps/Iam/WEB-INF</programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ cd /var/lib/tomcat/webapps/Iam/WEB-INF</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /opt/tomcat/latest/webapps/Iam/WEB-INF</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>

    <section>
      <title>Configuring Properties</title>

      <para>Modify the config.properties<indexterm class="singular">
          <primary>config.properties</primary>
        </indexterm> file as follows.</para>

      <para><programlisting>$ vi config.properties
...
// Enter the mail part
mail.host=
mail.username=
mail.password=
mail.port=
mail.smtp.auth=
mail.smtp.starttls.enable=
mail.from.address=
mail.from.name=
mail.html=

mail.contacts.address=&lt;enter the user account&gt;
mail.redirect.address=&lt;enter the domain or IP address&gt;

###########################################
## DataSource Configuration
###########################################
couch.db.url=http://localhost:8308
couch.db.username= CouchDB ID       // Enter CouchDB Id, PW in couch.db.username, couch.db.password
couch.db.password= CouchDB PW
couch.db.database=forcs_iam
couch.db.autoview=true
</programlisting></para>
    </section>

    <section xml:base="" xml:id="key_copy">
      <title>Copying the Encryption Key Files (RS256.private,
      RS256.pub)</title>

      <para>Copy the <xref linkend="rs256"/>, RS256.private<indexterm
          class="singular">
          <primary>RS256.private</primary>
        </indexterm> and RS256.pub<indexterm class="singular">
          <primary>RS256.pub</primary>
        </indexterm> files by executing the following commands.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7</para>

          <para><programlisting>$ cd /opt/tomcat/webapps/Iam/WEB-INF/classes/jwt-keys
$ rm -rf *
$ cp /opt/eformsign/app/RS256.* .
</programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ cd /var/lib/tomcat/webapps/Iam/WEB-INF/classes/jwt-keys
$ rm -rf *
$ cp /opt/eformsign/RS256.* .
</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /opt/tomcat/latest/webapps/Iam/WEB-INF/classes/jwt-keys
$ rm -rf *
$ cp /opt/eformsign/RS256.* .
</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>
  </section>

  <section xml:id="service_config">
    <title>Configuring Service</title>

    <para>Service<indexterm class="singular">
        <primary>service</primary>
      </indexterm> server is a server that synchronously responds to user
    requests, and is run on the WAS. Configure it as follows.</para>

    <section xml:base="" xml:id="service_foldercopy">
      <title>Go to the Service/WEB-INF/classes Folder</title>

      <para>Go to the Service/WEB-INF/classes folder in webapps in
      Tomcat.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7</para>

          <para><programlisting>$ cd /opt/tomcat/webapps/Service/WEB-INF/classes</programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ cd /var/lib/tomcat/webapps/Service/WEB-INF/classes</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /opt/tomcat/latest/webapps/Service/WEB-INF/classes</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>

    <section>
      <title>Configuring Properties</title>

      <para>Modify the aes256.properties, couchDB.properties,
      forcsCom.properties, storageConfig.xml, and email.properties files as
      follows.</para>

      <itemizedlist>
        <listitem>
          <para>aes256.properties<indexterm class="singular">
              <primary>aes256.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi aes256.properties
// Enter the encryption key generated in '4.2.1. Encrypting Your Account and Generating a Key File'.
aeskey.couchdb= 
aeskey.api= 
aeskey.webhook= 
aeskey.email=
</programlisting></para>
        </listitem>

        <listitem>
          <para>couchDB.properties<indexterm class="singular">
              <primary>couchDB.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi couchDB.properties
// Enter the encryption key file generated in '4.2.1. Encrypting Your Account and Generating a Key File'.
db.id_encrypted=
db.password_encrypted=
...
server.type=onpremise
server.service_url=http://Domain or ip/Service
server.daemon_url=http://Domain or ip/Daemon
server.home_url=http://Domain or ip
service.language=ko-kr,ja-jp,en-us
</programlisting></para>
        </listitem>

        <listitem>
          <para>forcsCom.properties<indexterm class="singular">
              <primary>forcsCom.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi forcsCom.properties
// Enter the encryption key file generated in '4.2.1. Encrypting Your Account and Generating a Key File'.
db.id_encrypted=
db.password_encrypted= 
</programlisting></para>
        </listitem>

        <listitem>
          <para>storageConfig.xml<indexterm class="singular">
              <primary>storageConfig.xml</primary>
            </indexterm></para>

          <para><programlisting>$ vi storageConfig.xml
…
&lt;!-- file system --&gt;
        &lt;bean id="storageService" class="oz.service.storage.impl.FileSystemServiceImpl"&gt;
                &lt;constructor-arg name="_root_path" value=""/&gt;             //Enter the storage path in the value of _root_path
                &lt;constructor-arg name="_imgUrl" value=""/&gt;              //Enter the domain/Service in the value in _imgUrl 
        &lt;/bean&gt;
…
</programlisting></para>
        </listitem>

        <listitem>
          <para>email.properties<indexterm class="singular">
              <primary>email.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi email.properties
host : Enter the mail server host
port : Enter the mail server port
account : Enter the mail account
password : Enter the mail password
prefix : Enter the header(optional)
ssl : Configure by mail server (true / false)
// Enter the encryption key file generated in '4.2.1. Encrypting Your Account and Generating a Key File'
account_encrypted : 
password_encrypted : 
</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>

    <section xml:base="" xml:id="pub_key_copy">
      <title>Copying the Encryption Key File (RS256.pub)</title>

      <para>Copy the <xref linkend="rs256"/>, RS256.pub<indexterm
          class="singular">
          <primary>RS256.pub</primary>
        </indexterm> file by executing the following command.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7</para>

          <para><programlisting>$ cd /opt/tomcat/webapps/Service/WEB-INF/classes/jwt-keys
$ rm -rf *
$ cp /opt/eformsign/RS256.pub .
</programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ cd /var/lib/tomcat/webapps/Service/WEB-INF/classes/jwt-keys
$ rm -rf *
$ cp /opt/eformsign/RS256.pub .
</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /opt/tomcat/latest/webapps/Service/WEB-INF/classes/jwt-keys
$ rm -rf *
$ cp /opt/eformsign/RS256.pub .
</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>
  </section>

  <section xml:id="daemon_config">
    <title>Configuring the Daemon</title>

    <para>The Daemon<indexterm class="singular">
        <primary>Daemon</primary>
      </indexterm> server is a server that asynchronously responds to batch
    and scheduler tasks such as email notification, bulk creation of
    documents, and generation of PDF documents. Same as the Service server, it
    is run on the WAS. Configure it as follows.</para>

    <section xml:base="" xml:id="daemon_foldercopy">
      <title>Go to the Daemon/WEB-INF/classes Folder</title>

      <para>Go to the Daemon/WEB-INF/classes folder in webapps in
      Tomcat.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7</para>

          <para><programlisting>$ cd /opt/tomcat/webapps/Daemon/WEB-INF/classes</programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ cd /var/lib/tomcat/webapps/Daemon/WEB-INF/classes</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /opt/tomcat/latest/webapps/Daemon/WEB-INF/classes</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>

    <section>
      <title>Configuring Properties</title>

      <para>Modify each one of aes256.properties, couchDB.properties,
      forcsCom.properties, storageConfig.xml, and email.properties files as
      follows.</para>

      <itemizedlist>
        <listitem>
          <para>aes256.properties<indexterm class="singular">
              <primary>aes256.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi aes256.properties
// Enter the encryption key file generated in '4.2.1. Encrypting Your Account and Generating a Key File'
aeskey.couchdb= 
aeskey.api= 
aeskey.webhook= 
aeskey.email= 
</programlisting></para>
        </listitem>

        <listitem>
          <para>couchDB.properties<indexterm class="singular">
              <primary>couchDB.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi couchDB.properties
// Enter the encryption key file generated in '4.2.1. Encrypting Your Account and Generating a Key File'
db.id_encrypted= 
db.password_encrypted= 
...
server.type=onpremise
server.service_url=http://Domain or ip/Service
server.daemon_url=http://Domain or ip/Daemon
server.home_url=http://Domain or ip
service.language=ko-kr,ja-jp,en-us
</programlisting></para>
        </listitem>

        <listitem>
          <para>forcsCom.properties<indexterm class="singular">
              <primary>forcsCom.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi forcsCom.properties
// Enter the encryption key file generated in '4.2.1. Encrypting Your Account and Generating a Key File'
db.id_encrypted= 
db.password_encrypted= 
</programlisting></para>
        </listitem>

        <listitem>
          <para>storageConfig.xml<indexterm class="singular">
              <primary>storageConfig.xml</primary>
            </indexterm></para>

          <para><programlisting>$ vi storageConfig.xml
…
        &lt;bean id="storageService" class="oz.service.storage.impl.FileSystemServiceImpl"&gt;
                &lt;constructor-arg name="_root_path" value=""/&gt;             //Enter the storage path in the value of _root_path.
                &lt;constructor-arg name="_imgUrl" value=""/&gt;              //Enter the domain/Service in the value of_imgUrl.
        &lt;/bean&gt;
…
</programlisting></para>
        </listitem>

        <listitem>
          <para>email.properties<indexterm class="singular">
              <primary>email.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi email.properties
host : Enter the mail server host
port : Enter the mail server port
account : Enter the mail account
password : Enter the mail password
prefix : Enter the header(optional)
ssl : Configure according to the mail server (true / false)
// Enter the encryption key file generated in '4.2.1. Encrypting Your Account and Generating a Key File'
account_encrypted :
password_encrypted : 
</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>
  </section>

  <section xml:id="home_config">
    <title>Configuring Home</title>

    <para>This is the screen displayed on the front-end to users and is
    installed on the web server.</para>

    <section xml:base="" xml:id="home_upzip">
      <title>Extracting the Home File</title>

      <para>Extract the Home file in nginx.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL7/CentOS 7</para>

          <para><programlisting>$ cd /usr/share/nginx/html
$ rm -rf *
$ tar -zvxf /opt/eformsign/app/home-10,2020,0429,300.tar.gz</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /var/www/html
$ rm -rf *
$ tar -zvxf /opt/eformsign/app/home-10,2020,0429,300.tar.gz</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>

    <section>
      <title>Configuring the Version</title>

      <para>1. To configure the Home version, go to the version folder.</para>

      <para><itemizedlist>
          <listitem>
            <para>RHEL 7/CentOS 7</para>

            <para><programlisting>$ cd /usr/share/nginx/html/version</programlisting></para>
          </listitem>

          <listitem>
            <para>Debian 10</para>

            <para><programlisting>$ cd /var/www/html/version</programlisting></para>
          </listitem>
        </itemizedlist>2. Open the version10,2020,0429,300.js file.</para>

      <note>
        <para>10,2020,0429,300 is the build version, and the file name may
        differ.</para>
      </note>

      <para><programlisting>$ vi version10,2020,****,***.js</programlisting></para>

      <para>3. Modify the file as follows.</para>

      <para><programlisting>var EFORMSIGN_VERSION="10,2020,****,***";
var OPTION_KO_BLOG_URL="https://www.eformsign.com/kr/blog/";
var OPTION_EN_BLOG_URL="https://www.eformsign.com/en/blog/";
var OPTION_JA_BLOG_URL="https://www.eformsign.com/jp/blog/";
var OPTION_KO_SUPPORT_URL="https://www.eformsign.com/kr/support/";
var OPTION_EN_SUPPORT_URL="https://www.eformsign.com/en/support/";
var OPTION_JA_SUPPORT_URL="https://www.eformsign.com/en/support/";
var OPTION_SERVICE_URL="http://domain/Service";
var OPTION_DAEMON_URL="http://domain/Daemon";
var OPTION_LOCATION_CODE="country code eg) kr";
</programlisting></para>
    </section>
  </section>

  <section xml:id="license_config">
    <title>Configuring ozconfig</title>

    <para>1. To configure ozconfig, go to the html folder.</para>

    <itemizedlist>
      <listitem>
        <para>RHEL 7/CentOS 7</para>

        <para><programlisting>$ cd /usr/share/nginx/html
</programlisting></para>
      </listitem>

      <listitem>
        <para>Debian 10</para>

        <para><programlisting>$ cd /var/www/html
</programlisting></para>
      </listitem>
    </itemizedlist>

    <para>2. Open the ozconfig.xml file.</para>

    <para><programlisting>$ vi ozconfig.xml
</programlisting></para>

    <para>3. Modify the file as follows.</para>

    <note>
      <para>The localhost must be changed to either the domain or IP.</para>
    </note>

    <para><programlisting>&lt;serviceInfo&gt;
&lt;browser&gt;
 &lt;preserveCache&gt;false&lt;/preserveCache&gt;
 &lt;/browser&gt;
 &lt;pageUrls&gt;
 &lt;execution&gt;http://localhost/eform/document/ozinoffice_view_service.html&lt;/execution&gt;
 &lt;download&gt;http://localhost/eform/form/list_form_oz.html&lt;/download&gt;
 &lt;upload&gt;http://localhost/eform/form/check_form_oz.html&lt;/upload&gt;
 &lt;propertyPane&gt;http://localhost/ozinoffice_pages/ozinoffice_prop_panel.html&lt;/propertyPane&gt;
 &lt;/pageUrls&gt;
 &lt;update&gt;
 &lt;addInVersion&gt;80.2020.0422.201&lt;/addInVersion&gt;
 &lt;productVersion&gt;19081901&lt;/productVersion&gt;
 &lt;downloadUrl&gt;http://localhost/development_tools/office/eformsign_form_builder.exe&lt;/downloadUrl&gt;
 &lt;/update&gt;
 &lt;ribbon&gt;
 &lt;documentInfo&gt;true&lt;/documentInfo&gt;
 &lt;/ribbon&gt;
&lt;/serviceInfo&gt;
</programlisting></para>
  </section>

  <section xml:id="license_config">
    <title>Configuring the License</title>

    <para>Go to the folder that contains the license file and set the license
    for each OS as follows.</para>

    <itemizedlist>
      <listitem>
        <para>RHEL 7</para>

        <para><programlisting>$ cp ozlicense.xml eformsignlicense.xml /opt/tomcat/webapps/Service/WEB-INF/classes/
$ cp ozlicense.xml eformsignlicense.xml /opt/tomcat/webapps/Daemon/WEB-INF/classes/
$ cp ozlicense.xml /usr/share/nginx/html/plugins/ozhtml5/license/
$ cp ozuserservicelicense.xml /usr/share/nginx/html/
</programlisting></para>
      </listitem>

      <listitem>
        <para>CentOS 7</para>

        <para><programlisting>$ cp ozlicense.xml eformsignlicense.xml /var/lib/tomcat/webapps/Service/WEB-INF/classes/
$ cp ozlicense.xml eformsignlicense.xml /var/lib/tomcat/webapps/Daemon/WEB-INF/classes/
$ cp ozlicense.xml /usr/share/nginx/html/plugins/ozhtml5/license/
$ cp ozuserservicelicense.xml /usr/share/nginx/html/
</programlisting></para>
      </listitem>

      <listitem>
        <para>Debian 10</para>

        <para><programlisting>$ cp ozlicense.xml eformsignlicense.xml /opt/tomcat/latest/webapps/Service/WEB-INF/classes/
$ cp ozlicense.xml eformsignlicense.xml /opt/tomcat/latest/webapps/Daemon/WEB-INF/classes/
$ cp ozlicense.xml /var/www/html/plugins/ozhtml5/license/
$ cp ozuserservicelicense.xml /var/www/html/
</programlisting></para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="proxy_config">
    <title>Configuring the Proxy</title>

    <section>
      <title>Configuring nginx</title>

      <para>In RHEL 7 and CentOS 7, modify the server{} part in the
      default.conf file.</para>

      <para>In Debian 10, modify the server{} part in the default file.</para>

      <para>1. Open either the default.conf or default file.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7/CentOS 7</para>

          <para><programlisting>$ vi /etc/nginx/conf.d/default.conf</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ vi /etc/nginx/sites-available/defult</programlisting></para>
        </listitem>
      </itemizedlist>

      <para>2. Modify the file as follows.</para>

      <para><itemizedlist>
          <listitem>
            <para>RHEL 7/CentOS 7: default.conf file<indexterm
                class="singular">
                <primary>default.conf</primary>
              </indexterm></para>

            <para><programlisting>server {
listen 80;
server_name localhost;

#charset koi8-r;
#access_log /var/log/nginx/host.access.log main;

location / {
root /usr/share/nginx/html;
#index index.html index.htm;
index login_private.html;
}

location /Iam {
# forward all request headers to backend
proxy_pass_request_headers on;
# these settings come from the CouchDB wiki
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

root /usr/share/nginx/html;
index index.html index.htm;
proxy_pass http://localhost:8080/Iam;
}

location /Service {
# forward all request headers to backend
proxy_pass_request_headers on;
# these settings come from the CouchDB wiki
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

root /usr/share/nginx/html;
index index.html index.htm;
proxy_pass http://localhost:8080/Service;
}

location /Daemon {
# forward all request headers to backend
proxy_pass_request_headers on;
# these settings come from the CouchDB wiki
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

root /usr/share/nginx/html;
index index.html index.htm;
proxy_pass http://localhost:8080/Daemon;
}

#error_page 404 /404.html;

# redirect server error pages to the static page /50x.html
#</programlisting></para>
          </listitem>

          <listitem>
            <para>Debian 10: default file<indexterm class="singular">
                <primary>default file</primary>
              </indexterm></para>

            <para><programlisting>server {

....

    location / {

        #index index.html index.htm;
        index login_private.html;

    }

    location /Iam {
        # forward all request headers to backend
        proxy_pass_request_headers on;
        # these settings come from the CouchDB wiki
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        index index.html index.htm;
        proxy_pass http://localhost:8080/Iam;
    }

    location /Service {
        # forward all request headers to backend
        proxy_pass_request_headers on;
        # these settings come from the CouchDB wiki
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        index index.html index.htm;
        proxy_pass http://localhost:8080/Service;
    }

    location /Daemon {
        # forward all request headers to backend
        proxy_pass_request_headers on;
        # these settings come from the CouchDB wiki
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        index index.html index.htm;
        proxy_pass http://localhost:8080/Daemon;

    }

...</programlisting></para>
          </listitem>
        </itemizedlist></para>

      <para/>

      <para/>
    </section>

    <section>
      <title>Configuring Tomcat</title>

      <para>1. Open server.xml in Tomcat.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7/CentOS 7</para>

          <para><programlisting>$ vi /opt/tomcat/conf/server.xml </programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ vi /etc/tomcat/server.xml</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ vi /opt/tomcat/latest/conf/server.xml</programlisting></para>
        </listitem>
      </itemizedlist>

      <para>2. Modify the server.xml<indexterm class="singular">
          <primary>server.xml</primary>
        </indexterm> file as follows.</para>

      <para><programlisting>&lt;Host name="localhost" appBase="webapps"

unpackWARs="true" autoDeploy="true"&gt;

&lt;Context docBase="Iam" path="/Iam"/&gt;
&lt;Context docBase="Service" path="/Service"/&gt;
&lt;Context docBase="Daemon" path="/Daemon" /&gt;
&lt;!-- SingleSignOn valve, share authentication between web applications
Documentation at: /docs/config/valve.html --&gt;
&lt;!--
&lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;
--&gt;

&lt;!-- Access log processes all example.
Documentation at: /docs/config/valve.html
Note: The pattern used is equivalent to using pattern="common" --&gt;
&lt;Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
prefix="localhost_access_log" suffix=".txt"
pattern="%h %l %u %t &amp;quot;%r&amp;quot; %s %b" /&gt;
&lt;/Host&gt;</programlisting></para>

      <para/>
    </section>
  </section>

  <section xml:id="execute_config">
    <title>Configuring GZIP</title>

    <para>1. Open the nginx.conf file in nginx.</para>

    <programlisting>$ vi /etc/nginx/nginx.conf</programlisting>

    <para>2. Modify the nginx.conf file as follows.</para>

    <programlisting>...
http {
...
    gzip on;
gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/html text/plain text/css application/json application/javascript text/xml;
    client_max_body_size 100M;
...
}
</programlisting>
  </section>

  <section xml:id="execute_config">
    <title>Configuring Startup</title>

    <para>Check whether the Service, Daemon, and Iam servers are installed and
    configured normally.</para>

    <section>
      <title>Running the Servers</title>

      <para>Start each server.</para>

      <para><programlisting>Service nginx start
Service couchdb start
Service tomcat start
</programlisting></para>
    </section>

    <section>
      <title>Service</title>

      <para>Enter the IP address/Service in the web browser, and check whether
      the following execution result is displayed.</para>

      <para><programlisting>{"Service Name":"Service","eformsign version":"10,2020,0429,300","Viewer version":"80,2020,0422,201","Server version":"80,2020,0422,1510","Cpu Count":"any","IP List":"any","Request URL":"any",
"Expire Date":"2021-05-01"}
</programlisting></para>
    </section>

    <section>
      <title>Daemon</title>

      <para>Enter the IP address/Daemon in the web browser, and check whether
      the following execution result is displayed.</para>

      <para><programlisting>{"Service Name":"Service","eformsign version":"10,2020,0429,300","Viewer version":"80,2020,0422,201","Server version":"80,2020,0422,1510","Cpu Count":"any","IP List":"any","Request URL":"any",
"Expire Date":"2021-05-01"}
</programlisting></para>
    </section>

    <section>
      <title>Iam</title>

      <para>Enter the IP address/Iam in the web browser, and check whether the
      Iam login page is displayed.</para>
    </section>
  </section>
</chapter>
