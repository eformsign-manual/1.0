<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="unix_install"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>설치 전 준비사항 (2): 서버 환경 구성</title>

  <para>본 장에서는eformsign를 설치하기 전에 설치가 필요한 서버 환경구성 소프트웨어를 설치하는 과정에 대해
  설명합니다.</para>

  <para>설치 순서는 Web Server, WAS, DB의 순으로 OS별로 모두 동일하며 command 기반으로
  진행됩니다.</para>

  <figure>
    <title>설치 순서</title>

    <mediaobject>
      <imageobject>
        <imagedata fileref="resources/install_order.png" width="700"/>
      </imageobject>
    </mediaobject>
  </figure>

  <para/>

  <section xml:id="unix-install-webtob">
    <title>Web Server 설치</title>

    <para>본 절에서는 Web Server를 설치하는 과정과 설치를 확인하는 방법에 대해서 설명합니다.</para>

    <para>eformsign은 Web Server로 nginx<indexterm class="singular">
        <primary>nginx</primary>
      </indexterm>를 사용합니다.</para>

    <note>
      <para>nginx의 권장 사양은 1.14.2 버전입니다.</para>
    </note>

    <section>
      <title>설치</title>

      <para>nginx를 설치하는 과정은 다음과 같습니다.</para>

      <orderedlist>
        <listitem>
          <para>Repository를 생성합니다.</para>

          <itemizedlist>
            <listitem>
              <para>RHEL 7</para>

              <para><screen>$ vi /etc/yum.repos.d/nginx.repo
[nginx]
name=nginx repo
baseurl=https://nginx.org/packages/<emphasis role="bold">rhel</emphasis>/7/$basearch/
gpgcheck=0
enabled=1</screen></para>
            </listitem>

            <listitem>
              <para>CentOS 7 /<emphasis role="bold"> Debian
              10</emphasis></para>

              <para><screen>$ vi /etc/yum.repos.d/nginx.repo
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/<emphasis role="bold">centos</emphasis>/7/$basearch/
gpgcheck=0
enabled=1</screen></para>

              <note>
                <para>Repository를 생성하는 방법은 OS별로 동일하며, 기본 URL 설정에서 각 OS의 이름을
                사용하는 부분만 차이가 있습니다.</para>
              </note>
            </listitem>
          </itemizedlist>

          <para/>
        </listitem>

        <listitem>
          <para>nginx를 설치합니다.</para>

          <para><itemizedlist>
              <listitem>
                <para>RHEL 7 / CentOS 7</para>

                <para><screen>$ yum install nginx -y</screen></para>
              </listitem>

              <listitem>
                <para>Debian 10</para>

                <para><screen>$ apt install nginx -y</screen></para>

                <note>
                  <para>Red Hat 계열인 RHEL과 CentOS는 명령어로 yum을 사용하며, Ubuntu 계열인
                  Debian은 apt를 사용합니다.</para>
                </note>
              </listitem>
            </itemizedlist></para>

          <para/>
        </listitem>

        <listitem>
          <para>nginx를 실행합니다.</para>

          <para>OS에 상관없이 다음의 명령을 통해 Nginx를 실행합니다.</para>

          <para><screen>$ service nginx start</screen></para>
        </listitem>

        <listitem>
          <para>방화벽을 엽니다.</para>

          <para>방화벽 및 포트를 여는 방법은 RHEL 7, CentOS과 Debian 10이 차이가 있습니다. 각 OS에 맞는
          방법으로 방화벽을 엽니다.</para>

          <para><itemizedlist>
              <listitem>
                <para>RHEL 7 / CentOS 7</para>

                <para>1. 방화벽 구동 중인지를 확인합니다.</para>

                <para><screen>$ systemctl status firewalld.service</screen></para>

                <para>2. 기본 Zone을 확인합니다.</para>

                <para><screen>$ firewall-cmd --get-default-zone</screen>3. 구동
                중인 방화벽을 확인합니다.</para>

                <para><screen>$ firewall-cmd --get-active-zone</screen>4. 열린
                포트가 있는지를 확인합니다.</para>

                <para><screen>$ firewall-cmd --list-ports</screen>5. 80번 포트를
                엽니다.</para>

                <para><screen>$ firewall-cmd --permanent --zone=public --add-port=80/tcp</screen>6.
                방화벽을 재구동합니다.</para>

                <screen>$ firewall-cmd --reload</screen>
              </listitem>

              <listitem>
                <para>Debian 10</para>

                <para>1. ufw 방화벽을 설치합니다.</para>

                <para><screen>$ apt install nginx -y</screen></para>

                <para>2. 20번, 80번 포트를 엽니다.</para>

                <para><screen>$ ufw allow 22
$ ufw allow 80</screen>3. ufw 방화벽을 활성화하고 포트가 열렸는지를 확인합니다.</para>

                <para><screen>$ ufw enable
$ ufw status</screen></para>

                <para/>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>설치 확인</title>

      <para>웹 브라우저에 자신의 IP 주소를 입력합니다. 다음과 같은 화면이 나타나면 정상적으로 설치가 된
      상태입니다.</para>

      <para/>

      <figure>
        <title>nginx 설치 확인 화면</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="resources/Nginx_install_check.png" width="750"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="unix-install-webtob">
    <title>WAS 설치</title>

    <para>본 절에서는 WAS를 설치하는 과정과 설치를 확인하는 방법에 대해서 설명합니다.</para>

    <para>eformsign은 WAS로 Tomcat<indexterm class="singular">
        <primary>Tomcat</primary>
      </indexterm>을 사용합니다.</para>

    <note>
      <para>Tomcat의 권장 사양은 8.5 버전입니다.</para>
    </note>

    <section>
      <title>설치</title>

      <para>Tomcat를 설치하는 과정은 다음과 같습니다.</para>

      <orderedlist>
        <listitem>
          <para>OS별로 다음의 명령을 실행해 Tomcat을 설치합니다.</para>

          <itemizedlist>
            <listitem>
              <para>RHEL 7</para>

              <para><screen>$ cd /opt
$ yum install wget unzip -y
$ wget https://www-us.apache.org/dist/tomcat/tomcat-8/v8.5.54/bin/apache-tomcat-8.5.54.zip
$ unzip apache-tomcat-8.5.54.zip</screen></para>
            </listitem>

            <listitem>
              <para>CentOS 7</para>

              <para><screen>$ yum -y install tomcat
$ yum install -y tomcat-webapps tomcat-admin-webapps</screen></para>
            </listitem>

            <listitem>
              <para>Debian 10</para>

              <para><screen>$ cd /tmp
$ wget http://apache.mirror.cdnetworks.com/tomcat/tomcat-8/v8.5.54/bin/apache-tomcat-8.5.54.tar.gz
$ tar -xf apache-tomcat-8.5.54.tar.gz
$ mv apache-tomcat-8.5.54 /opt/tomcat/
$ ln -s /opt/tomcat/apache-tomcat-8.5.54 /opt/tomcat/latest</screen></para>
            </listitem>
          </itemizedlist>

          <para/>
        </listitem>

        <listitem>
          <para>기본 설정을 하고 user를 생성합니다.</para>

          <para><itemizedlist>
              <listitem>
                <para>RHEL 7 / CentOS 7</para>

                <para><screen>$ ln -s /opt/apache-tomcat-8.5.54 /opt/tomcat
$ mkdir /var/log/tomcat
$ rmdir /opt/tomcat/logs
$ ln -s /var/log/tomcat /opt/tomcat/logs
$ useradd tomcat
$ chown -R tomcat:tomcat /opt/apache-tomcat-8.5.54
$ chown -R tomcat:tomcat /var/log/tomcat
$ chmod +x /opt/tomcat/bin/*.sh</screen></para>
              </listitem>

              <listitem>
                <para>Debian 10</para>

                <para><screen>$ useradd -m -U -d /opt/tomcat -s /bin/false tomcat
$ chown -R tomcat: /opt/tomcat
$ sh -c 'chmod +x /opt/tomcat/latest/bin/*.sh'</screen></para>
              </listitem>
            </itemizedlist></para>

          <para/>
        </listitem>

        <listitem>
          <para>서비스 파일을 생성합니다.</para>

          <para><itemizedlist>
              <listitem>
                <para>RHEL 7 / CentOS 7</para>

                <para><screen>$vi /etc/systemd/system/tomcat.service
[Unit]
Description=Tomcat
After=syslog.target network.target
  
[Service]
Type=forking
  
User=tomcat
Group=tomcat
  
ExecStart=/opt/tomcat/bin/catalina.sh start
ExecStop=/opt/tomcat/bin/catalina.sh stop
  
[Install]
WantedBy=multi-user.target</screen></para>
              </listitem>

              <listitem>
                <para>Debian 10</para>

                <para><screen>$vi /etc/systemd/system/tomcat.service
[Unit]
Description=Tomcat 8.5 servlet container
After=network.target
  
[Service]
Type=forking
  
User=tomcat
Group=tomcat
  
Environment="JAVA_HOME=/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64"
Environment="JAVA_OPTS=-Djava.security.egd=file:///dev/urandom"
  
Environment="CATALINA_BASE=/opt/tomcat/latest"
Environment="CATALINA_HOME=/opt/tomcat/latest"
Environment="CATALINA_PID=/opt/tomcat/latest/temp/tomcat.pid"
Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"
  
ExecStart=/opt/tomcat/latest/bin/startup.sh
ExecStop=/opt/tomcat/latest/bin/shutdown.sh
  
[Install]
WantedBy=multi-user.target</screen></para>
              </listitem>
            </itemizedlist></para>
        </listitem>

        <listitem>
          <para>다음의 명령을 통해 생성한 서비스 파일을 reload합니다.</para>

          <para><screen>$ systemctl daemon-reload</screen></para>
        </listitem>

        <listitem>
          <para>방화벽을 엽니다.</para>

          <para>방화벽 및 포트를 여는 방법은 RHEL 7, CentOS과 Debian 10이 차이가 있지만, 공통으로
          8080번 포트를 엽니다.</para>

          <para><itemizedlist>
              <listitem>
                <para>RHEL 7 / CentOS 7</para>

                <screen>$ firewall-cmd --zone=public --add-port=8080/tcp --permanent
$ firewall-cmd --reload</screen>
              </listitem>

              <listitem>
                <para>Debian 10</para>

                <para><screen>$ ufw allow 8080</screen></para>
              </listitem>
            </itemizedlist></para>
        </listitem>

        <listitem>
          <para>Tomcat을 실행합니다.</para>

          <para>OS에 상관없이 다음의 명령을 통해 Tomcat를 실행합니다.</para>

          <para><screen>$ service tomcat start</screen></para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>설치 확인</title>

      <para>웹 브라우저에 자신의 IP 주소를 입력합니다. Tomcat이 정상적으로 기동된 경우 다음과 같은 화면이
      표시됩니다.</para>

      <para/>

      <figure>
        <title>Tomcat 설치 확인 화면</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="resources/Tomcat_install_check.png"
                       width="750"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section xml:id="unix-install-webtob">
    <title>DB 설치</title>

    <para>본 절에서는 DB를 설치하는 과정과 설치를 확인하는 방법에 대해서 설명합니다.</para>

    <para>eformsign은 DB로 CouchDB<indexterm class="singular">
        <primary>CouchDB</primary>
      </indexterm>를 사용합니다.</para>

    <note>
      <para>CouchDB의 권장 사양은 3.0 버전입니다.</para>
    </note>

    <section>
      <title>설치</title>

      <para>CouchDB를 설치하는 과정은 다음과 같습니다.</para>

      <orderedlist>
        <listitem>
          <para>EPEL Repository를 생성합니다.</para>

          <note>
            <para>EPEL은 "Extra Packages of Enterprise Linux"의 줄임말로, Fedora
            Project에서 제공되는 저장소입니다. 각종 패키지의 최신 버전을 제공하는 community 기반의 저장소로, yum
            명령으로는 설치가 되지 않는 최신 버전의 패키지를 사용하고 싶은 경우에 설치해 사용합니다.</para>
          </note>

          <itemizedlist>
            <listitem>
              <para>RHEL 7 / CentOS 7</para>

              <para><screen>$ yum update -y
$ wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
$ yum install -y epel-release-latest-7.noarch.rpm</screen></para>
            </listitem>
          </itemizedlist>

          <para/>
        </listitem>

        <listitem>
          <para>CouchDB 패키지 리포지토리를 활성화합니다.</para>

          <para><itemizedlist>
              <listitem>
                <para>RHEL 7 / CentOS 7</para>

                <para><screen>$ vi /etc/yum.repos.d/bintray-apache-couchdb-rpm.repo
[bintray--apache-couchdb-rpm]
name=bintray--apache-couchdb-rpm
baseurl=http://apache.bintray.com/couchdb-rpm/el7/$basearch/
gpgcheck=0
repo_gpgcheck=0
enabled=1</screen></para>
              </listitem>

              <listitem>
                <para>Debian 10</para>

                <para><screen>$ apt-get install -y apt-transport-https gnupg ca-certificates
$ echo "deb https://apache.bintray.com/couchdb-deb buster main" \
    | sudo tee -a /etc/apt/sources.list.d/couchdb.list</screen></para>
              </listitem>
            </itemizedlist></para>

          <para/>
        </listitem>

        <listitem>
          <para>CouchDB 패키지를 설치합니다.</para>

          <para><itemizedlist>
              <listitem>
                <para>RHEL 7 / CentOS 7</para>

                <para><screen>$ yum -y install epel-release &amp;&amp; sudo yum -y install couchdb</screen></para>
              </listitem>

              <listitem>
                <para>Debian 10</para>

                <para><screen>$ apt-key adv --keyserver keyserver.ubuntu.com --recv-keys \
  8756C4F765C9AC3CB6B85D62379CE192D401AB61
$ apt update
$ install -y couchdb</screen></para>
              </listitem>
            </itemizedlist></para>

          <para/>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>기본 설정</title>

      <para>local.ini<indexterm class="singular">
          <primary>local.ini</primary>
        </indexterm> 파일과 default.ini<indexterm class="singular">
          <primary>default.ini</primary>
        </indexterm> 파일을 다음과 같이 수정합니다. 수정 방법은 OS별로 동일합니다. </para>

      <para><itemizedlist>
          <listitem>
            <para>local.ini 파일</para>

            <para><screen>$ vi /opt/couchdb/etc/local.ini
[admins]
admin = mysecretpassword // 제일 하단에 [admins] 내용 주석 제거하고 원하는 ID/PW 로 변경</screen></para>
          </listitem>

          <listitem>
            <para>default.ini 파일</para>

            <para><screen>[cluster]
q=1             // 중간 [cluster] 부분에 q=2, n=3 을 q=1, n=1로 변경 (/cluster 로 검색)
n=1            
...
[chttpd]
port = 8308     // port = 5984 를 port = 8308 로 변경</screen></para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>설치 확인</title>

      <para>CouchDB를 실행시켜 접속을 확인힙니다. </para>

      <para><itemizedlist>
          <listitem>
            <para>DB 실행</para>

            <para><screen>$ service couchdb start</screen></para>
          </listitem>

          <listitem>
            <para>접속 확인 </para>

            <para><screen>$ curl http://localhost:8308</screen></para>
          </listitem>
        </itemizedlist></para>
    </section>
  </section>
</chapter>
