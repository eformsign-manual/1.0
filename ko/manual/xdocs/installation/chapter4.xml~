<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="chapter4" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>eformsign 설치 및 설정 방법</title>

  <para>본 장에서는 eformsign을 설치하는 방법 및 속성 등의 설정 방법에 대해 설명합니다.</para>

  <note>
    <para>eformsign을 설치 및 기동하기 위해서는 Web server, WAS, DB가 먼저 설치되어 있어야 합니다. 설치
    방법은 <xref linkend="chapter3"/>을 참고하시기 바랍니다.</para>
  </note>

  <section xml:id="eformsign_install">
    <title>eformsign 설치</title>

    <para>본 절에서는 eformsign을 설치하는 방법에 대해서 설명합니다.</para>

    <section>
      <title>사전 준비</title>

      <para>다음의 명령을 실행해 초기값 설정파일을 복사합니다.</para>

      <para><programlisting>$ mkdir /opt/eformsign
$ cd /opt/eformsign
// 전달 받은 압축 파일을 현재 폴더로 복사합니다. '10,2020,0429,300'은 빌드 버전으로, 파일명이 다를 수 있습니다.
$ cp Onpremise-10,2020,0429,300.zip
</programlisting></para>
    </section>

    <section xml:base="" xml:id="eformsign_unzip">
      <title>eformsign 압축 풀기</title>

      <para>다음의 명령을 실행해 Onpremise-10,2020,0429,300.zip 파일의 압축을 풉니다.</para>

      <note>
        <para>10,2020,0429,300은 빌드 버전으로, 파일명이 다를 수 있습니다.</para>
      </note>

      <para><programlisting>$ unzip Onpremise-10,2020,0429,300.zip</programlisting></para>
    </section>

    <section xml:base="" xml:id="storage_config">
      <title>스토리지 설정</title>

      <para>eformsign이 사용할 스토리지를 설정합니다.</para>

      <para><programlisting>$ cd /opt
$ mkdir storage
$ chown -R tomcat:tomcat storage/
$ chmod -R 750 storage/
$ cd storage
$ unzip /opt/eformsign/storagefiles.zip
</programlisting></para>
    </section>

    <section xml:base="" xml:id="upzip">
      <title>Daemon, Iam 및 Service 압축 풀기</title>

      <para>tomcat 내 webapps 위치에 폴더를 생성하고 Daemon<indexterm class="singular">
          <primary>Daemon</primary>
        </indexterm>, Iam<indexterm class="singular">
          <primary>Iam</primary>
        </indexterm> 및 Service<indexterm class="singular">
          <primary>Service</primary>
        </indexterm> 파일의 압축을 풉니다. 압축을 푸는 방법은 OS별로 상이합니다.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7</para>

          <para><programlisting>$ cd /opt/tomcat/webapps/
$ rm -rf *
$ mkdir Daemon Iam Service
$ chown -R tomcat:tomcat *
$ chmod –R 750 *
$ cd Daemon
$ unzip /opt/eformsign/Daemon-10,2020,0429,300.war
$ cd ../Iam
$ unzip /opt/eformsign/Iam-10,2020,0429,300.war
$ cd ../Service
$ unzip /opt/eformsign/Service-10,2020,0429,300.war
</programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ cd /var/lib/tomcat/webapps
$ rm -rf *
$ mkdir Daemon Iam Service
$ chown -R tomcat:tomcat *
$ chmod –R 750 *
$ cd Daemon
$ unzip /opt/eformsign/Daemon-10,2020,0429,300.war
$ cd ../Iam
$ unzip /opt/eformsign/Iam-10,2020,0429,300.war
$ cd ../Service
$ unzip /opt/eformsign/Service-10,2020,0429,300.war
</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /opt/tomcat/latest/webapps/
$ rm -rf *
$ mkdir Daemon Iam Service
$ chown -R tomcat:tomcat *
$ chmod –R 750 *
$ cd Daemon
$ unzip /opt/eformsign/Daemon-10,2020,0429,300.war
$ cd ../Iam
$ unzip /opt/eformsign/Iam-10,2020,0429,300.war
$ cd ../Service
$ unzip /opt/eformsign/Service-10,2020,0429,300.war
</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>

    <section xml:base="" xml:id="server_stop">
      <title>서버 중지</title>

      <para>서버 환경 구성을 위해 설치 및 기동한 Web Server, WAS, DB 서버를 중지시킵니다.</para>

      <para><programlisting>$ service nginx stop
$ service tomcat stop
$ service couchdb stop</programlisting></para>
    </section>
  </section>

  <section xml:id="encoding">
    <title>암호화 설정</title>

    <para>계정을 암호화하고 암호화 키 파일을 생성합니다.</para>

    <section xml:id="rs256">
      <title>계정 암호화 및 키 파일 생성</title>

      <para>다음의 명령을 실행해 계정을 암호화하고 출력 결과를 메모합니다. 암호화된 계정 정보가 출력됩니다. 암호화된 계정 정보가
      출력되면 키 파일인 RS256.private<indexterm class="singular">
          <primary>RS256.private</primary>
        </indexterm>과 RS256.pub<indexterm class="singular">
          <primary>RS256.pub</primary>
        </indexterm> 파일이 생성됩니다.</para>

      <para><programlisting>$ cd /opt/eformsign
$ java -jar eformsignGen.jar init
Enter couchdb ID : CouchDB ID
Enter couchdb Password : CouchDB PW
Enter email ID : email ID
Enter email Password : email PW
</programlisting></para>
    </section>
  </section>

  <section xml:id="db_config">
    <title>CouchDB 설정</title>

    <para>CouchDB<indexterm class="singular">
        <primary>CouchDB</primary>
      </indexterm> 설정을 통해 eformsign의 데이터를 통합 저장하고 관리할 수 있도록 합니다.</para>

    <section>
      <title>init-data 폴더 생성 및 파일 복사</title>

      <para>init-data<indexterm class="singular">
          <primary>init-data</primary>
        </indexterm> 폴더를 생성하고 eformsign 폴더로 CouchDB 파일을 복사합니다.</para>

      <para><programlisting>$ cd /opt/couchdb
$ mkdir init-data
$ cd init-data/
$ cp /opt/eformsign/eformsign-couchdb-* .
</programlisting></para>
    </section>

    <section>
      <title>압축풀기</title>

      <para>다음의 명령을 실행해 CouchDB 파일의 압축을 풉니다.</para>

      <para><programlisting>$ tar -zxvf eformsign-couchdb-default-data.tar.gz</programlisting></para>
    </section>

    <section>
      <title>초기 설정 쉘 스크립트 복사</title>

      <para>다음의 명령을 실행해 초기 설정 쉘 스크립트를 복사합니다.</para>

      <para><programlisting>$ cp eformsign-couchdb-backup eformsign-couchdb-default-data
$ cp eformsign-couchdb-restore eformsign-couchdb-default-data
$ cd eformsign-couchdb-default-data
</programlisting></para>
    </section>

    <section>
      <title>eformsign-couchdb-restore 파일 수정</title>

      <para>다음의 명령을 실행해 eformsign-couchdb-restore<indexterm class="singular">
          <primary>eformsign-couchdb-restore</primary>
        </indexterm> 파일을 수정합니다.</para>

      <para><programlisting>$ vi eformsign-couchdb-restore
./eformsign-couchdb-backup -r -H localhost -d $filename -f $f -u admin -p password -q -c  // admin , password 부분에 couchdbID, couchdbPW 입력
</programlisting></para>
    </section>

    <section>
      <title>실행 권한 부여</title>

      <para>CouchDB에 대한 실행 권한을 부여합니다.</para>

      <para><programlisting>$ chmod +x eformsign-couchdb-*</programlisting></para>
    </section>

    <section>
      <title>스크립트 실행</title>

      <para>CouchDB를 재시작합니다.</para>

      <para><programlisting>$ service couchdb restart
$ curl -X PUT http://admin:password@localhost:8308/_users // admin:password 부분에 couchdbID:couchdbPW 입력
$ curl -X PUT http://admin:password@localhost:8308/_replicator // admin:password 부분에 couchdbID:couchdbPW 입력
$ ./eformsign-couchdb-restore
</programlisting></para>
    </section>
  </section>

  <section xml:id="iam_config">
    <title>Iam 설정</title>

    <para>Iam<indexterm class="singular">
        <primary>Iam</primary>
      </indexterm> 서버는 Oauth 방식으로 사용자의 계정을 관리하는 서버입니다. 다음의 순서로 설정합니다.</para>

    <section xml:base="" xml:id="iam_foldercopy">
      <title>Iam/WEB-INF 폴더로 이동</title>

      <para>OS별로 다음의 명령을 실행해 Iam 내 WEB-INF 폴더로 이동합니다.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7</para>

          <para><programlisting>$ cd /opt/tomcat/webapps/Iam/WEB-INF</programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ cd /var/lib/tomcat/webapps/Iam/WEB-INF</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /opt/tomcat/latest/webapps/Iam/WEB-INF</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>

    <section>
      <title>속성 설정</title>

      <para>config.properties<indexterm class="singular">
          <primary>config.properties</primary>
        </indexterm> 파일을 다음과 같이 수정합니다.</para>

      <para><programlisting>$ vi config.properties
...
// mail 부분 입력
mail.host=
mail.username=
mail.password=
mail.port=
mail.smtp.auth=
mail.smtp.starttls.enable=
mail.from.address=
mail.from.name=
mail.html=

mail.contacts.address=&lt;사용자 계정 입력&gt;
mail.redirect.address=&lt;도메인 또는 IP주소 입력&gt;

###########################################
## DataSource Configuration
###########################################
couch.db.url=http://localhost:8308
couch.db.username= CouchDB ID       // couch.db.username, couch.db.password를 CouchDB ID, PW 로 입력 후 저장
couch.db.password= CouchDB PW
couch.db.database=forcs_iam
couch.db.autoview=true
</programlisting></para>
    </section>

    <section xml:base="" xml:id="key_copy">
      <title>암호화 키 파일(RS256.private, RS256.pub) 복사</title>

      <para>다음의 명령을 실행해 <xref linkend="rs256"/>에서 생성한 파일인
      RS256.private<indexterm class="singular">
          <primary>RS256.private</primary>
        </indexterm>과 RS256.pub<indexterm class="singular">
          <primary>RS256.pub</primary>
        </indexterm>을 복사합니다.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7</para>

          <para><programlisting>$ cd /opt/tomcat/webapps/Iam/WEB-INF/classes/jwt-keys
$ rm -rf *
$ cp /opt/eformsign/app/RS256.* .
</programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ cd /var/lib/tomcat/webapps/Iam/WEB-INF/classes/jwt-keys
$ rm -rf *
$ cp /opt/eformsign/RS256.* .
</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /opt/tomcat/latest/webapps/Iam/WEB-INF/classes/jwt-keys
$ rm -rf *
$ cp /opt/eformsign/RS256.* .
</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>
  </section>

  <section xml:id="service_config">
    <title>Service 설정</title>

    <para>사용자의 전반적인 요청에 대한 응답을 동기 처리하는 서버로, WAS 위에서 기동됩니다. 다음의 순서로
    설정합니다.</para>

    <section xml:base="" xml:id="service_foldercopy">
      <title>Service/WEB-INF/classes 폴더로 이동</title>

      <para>tomcat 내 webapps의 Service/WEB-INF/classes 폴더로 이동합니다.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7</para>

          <para><programlisting>$ cd /opt/tomcat/webapps/Service/WEB-INF/classes</programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ cd /var/lib/tomcat/webapps/Service/WEB-INF/classes</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /opt/tomcat/latest/webapps/Service/WEB-INF/classes</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>

    <section>
      <title>속성 설정</title>

      <para>aes256.properties, couchDB.properties, forcsCom.properties,
      storageConfig.xml, email.propertie 파일을 각각 다음과 같이 수정합니다.</para>

      <itemizedlist>
        <listitem>
          <para>aes256.properties<indexterm class="singular">
              <primary>aes256.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi aes256.properties
// 위 '4.2.1. 계정 암호화 및 키 파일 생성'에서 생성된 암호화 키 입력
aeskey.couchdb= 
aeskey.api= 
aeskey.webhook= 
aeskey.email=
</programlisting></para>
        </listitem>

        <listitem>
          <para>couchDB.properties<indexterm class="singular">
              <primary>couchDB.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi couchDB.properties
// 위 '4.2.1. 계정 암호화 및 키 파일 생성'에서 생성된 암호화 키 입력
db.id_encrypted=
db.password_encrypted=
...
server.type=onpremise
server.service_url=http://도메인 또는 ip/Service
server.daemon_url=http://도메인 또는 ip/Daemon
server.home_url=http://도메인 또는 ip
service.language=ko-kr,ja-jp,en-us
</programlisting></para>
        </listitem>

        <listitem>
          <para>forcsCom.properties<indexterm class="singular">
              <primary>forcsCom.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi forcsCom.properties
// 위 '4.2.1. 계정 암호화 및 키 파일 생성'에서 생성된 암호화 키 입력
db.id_encrypted=
db.password_encrypted= 
</programlisting></para>
        </listitem>

        <listitem>
          <para>storageConfig.xml<indexterm class="singular">
              <primary>storageConfig.xml</primary>
            </indexterm></para>

          <para><programlisting>$ vi storageConfig.xml
…
&lt;!-- file system --&gt;
        &lt;bean id="storageService" class="oz.service.storage.impl.FileSystemServiceImpl"&gt;
                &lt;constructor-arg name="_root_path" value=""/&gt;             //_root_path 의 value에 storage path 입력
                &lt;constructor-arg name="_imgUrl" value=""/&gt;              //_imgUrl 의 value에 domain/Service 입력
        &lt;/bean&gt;
…
</programlisting></para>
        </listitem>

        <listitem>
          <para>email.properties<indexterm class="singular">
              <primary>email.propertie</primary>
            </indexterm></para>

          <para><programlisting>$ vi email.properties
host : mail 서버 호스트 입력
port : mail 서버 포트 입력
account : mail 계정 입력
password : mail 비밀번호 입력
prefix : 머릿글 입력(option)
ssl : mail 서버에 따른 설정 (true / false)
// 위 '4.2.1 계정 암호화 및 키 파일 생성'에서 생성된 암호화 키 입력
account_encrypted : 
password_encrypted : 
</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>

    <section xml:base="" xml:id="pub_key_copy">
      <title>암호화 키 파일(RS256.pub) 복사</title>

      <para>다음의 명령을 실행해 <xref linkend="rs256"/>에서 생성한 파일인 RS256.pub<indexterm
          class="singular">
          <primary>RS256.pub</primary>
        </indexterm>을 복사합니다.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7</para>

          <para><programlisting>$ cd /opt/tomcat/webapps/Service/WEB-INF/classes/jwt-keys
$ rm -rf *
$ cp /opt/eformsign/RS256.pub .
</programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ cd /var/lib/tomcat/webapps/Service/WEB-INF/classes/jwt-keys
$ rm -rf *
$ cp /opt/eformsign/RS256.pub .
</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /opt/tomcat/latest/webapps/Service/WEB-INF/classes/jwt-keys
$ rm -rf *
$ cp /opt/eformsign/RS256.pub .
</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>
  </section>

  <section xml:id="daemon_config">
    <title>Daemon 설정</title>

    <para>Daemon<indexterm class="singular">
        <primary>Daemon</primary>
      </indexterm> 서버는 Email 등 알림, 일괄 비동기 작성, 문서 PDF 생성 등 비동기적인 배치 및
    스케줄(Batch, scheduler) 작업에 대한 응답 처리를 비동기로 처리하는 서버로, Service 서버와 마찬가지로 WAS
    위에서 기동됩니다. 다음의 순서로 설정합니다.</para>

    <section xml:base="" xml:id="daemon_foldercopy">
      <title>Daemon/WEB-INF/classes 폴더로 이동</title>

      <para>tomcat 내 webapps의 Daemon/WEB-INF/classes 폴더로 이동합니다.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7</para>

          <para><programlisting>$ cd /opt/tomcat/webapps/Daemon/WEB-INF/classes</programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ cd /var/lib/tomcat/webapps/Daemon/WEB-INF/classes</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /opt/tomcat/latest/webapps/Daemon/WEB-INF/classes</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>

    <section>
      <title>속성 설정</title>

      <para>aes256.properties, couchDB.properties, forcsCom.properties,
      storageConfig.xml, email.properties 파일을 각각 다음과 같이 수정합니다.</para>

      <itemizedlist>
        <listitem>
          <para>aes256.properties<indexterm class="singular">
              <primary>aes256.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi aes256.properties
// 위 '4.2.1. 계정 암호화 및 키 파일 생성'에서 생성된 암호화 키 입력
aeskey.couchdb= 
aeskey.api= 
aeskey.webhook= 
aeskey.email= 
</programlisting></para>
        </listitem>

        <listitem>
          <para>couchDB.properties<indexterm class="singular">
              <primary>couchDB.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi couchDB.properties
// 위 '4.2.1. 계정 암호화 및 키 파일 생성'에서 생성된 암호화 키 입력
db.id_encrypted= 
db.password_encrypted= 
...
server.type=onpremise
server.service_url=http://도메인 또는 ip/Service
server.daemon_url=http://도메인 또는 ip/Daemon
server.home_url=http://도메인 또는 ip
service.language=ko-kr,ja-jp,en-us
</programlisting></para>
        </listitem>

        <listitem>
          <para>forcsCom.properties<indexterm class="singular">
              <primary>forcsCom.properties</primary>
            </indexterm></para>

          <para><programlisting>$ vi forcsCom.properties
// 위 '4.2.1. 계정 암호화 및 키 파일 생성'에서 생성된 암호화 키 입력
db.id_encrypted= 
db.password_encrypted= 
</programlisting></para>
        </listitem>

        <listitem>
          <para>storageConfig.xml<indexterm class="singular">
              <primary>storageConfig.xml</primary>
            </indexterm></para>

          <para><programlisting>$ vi storageConfig.xml
…
        &lt;bean id="storageService" class="oz.service.storage.impl.FileSystemServiceImpl"&gt;
                &lt;constructor-arg name="_root_path" value=""/&gt;             //_root_path 의 value에 storage path 입력
                &lt;constructor-arg name="_imgUrl" value=""/&gt;              //_imgUrl 의 value에 domain/Service 입력
        &lt;/bean&gt;
…
</programlisting></para>
        </listitem>

        <listitem>
          <para>email.properties<indexterm class="singular">
              <primary>email.propertie</primary>
            </indexterm></para>

          <para><programlisting>$ vi email.properties
host : mail 서버 호스트 입력
port : mail 서버 포트 입력
account : mail 계정 입력
password : mail 비밀번호 입력
prefix : 머릿글 입력(option)
ssl : mail 서버에 따른 설정 (true / false)
// 위 '4.2.1 계정 암호화 및 키 파일 생성'에서 생성된 암호화 키 입력
account_encrypted :
password_encrypted : 
</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>
  </section>

  <section xml:id="home_config">
    <title>Home 설정</title>

    <para>사용자에게 보여지는 프론트 화면으로 Web server에 설치됩니다.</para>

    <section xml:base="" xml:id="home_upzip">
      <title>Home 압축 파일 풀기</title>

      <para>nginx에 Home 압축 파일을 풉니다.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL7 / CentOS 7</para>

          <para><programlisting>$ cd /usr/share/nginx/html
$ rm -rf *
$ tar -zvxf /opt/eformsign/app/home-10,2020,0429,300.tar.gz</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ cd /var/www/html
$ rm -rf *
$ tar -zvxf /opt/eformsign/app/home-10,2020,0429,300.tar.gz</programlisting></para>
        </listitem>
      </itemizedlist>

      <para/>
    </section>

    <section>
      <title>버전 설정</title>

      <para>1. Home의 버전 설정을 위해 version 폴더로 이동합니다.</para>

      <para><itemizedlist>
          <listitem>
            <para>RHEL7 / CentOS 7</para>

            <para><programlisting>$ cd /usr/share/nginx/html/version</programlisting></para>
          </listitem>

          <listitem>
            <para>Debian 10</para>

            <para><programlisting>$ cd /var/www/html/version</programlisting></para>
          </listitem>
        </itemizedlist>2. version10,2020,0429,300.js 파일을 엽니다.</para>

      <note>
        <para>10,2020,0429,300은 빌드 버전으로, 파일명이 다를 수 있습니다.</para>
      </note>

      <para><programlisting>$ vi version10,2020,****,***.js</programlisting></para>

      <para>3. 다음과 같이 수정합니다.</para>

      <para><programlisting>var EFORMSIGN_VERSION="10,2020,****,***";
var OPTION_KO_BLOG_URL="https://www.eformsign.com/kr/blog/";
var OPTION_EN_BLOG_URL="https://www.eformsign.com/en/blog/";
var OPTION_JA_BLOG_URL="https://www.eformsign.com/jp/blog/";
var OPTION_KO_SUPPORT_URL="https://www.eformsign.com/kr/support/";
var OPTION_EN_SUPPORT_URL="https://www.eformsign.com/en/support/";
var OPTION_JA_SUPPORT_URL="https://www.eformsign.com/en/support/";
var OPTION_SERVICE_URL="http://도메인/Service";
var OPTION_DAEMON_URL="http://도메인/Daemon";
var OPTION_LOCATION_CODE="국가코드 ex) kr";
</programlisting></para>
    </section>
  </section>

  <section xml:id="license_config">
    <title>ozconfig 설정</title>

    <para>1. ozconfig 설정을 위해 html 폴더로 이동합니다.</para>

    <itemizedlist>
      <listitem>
        <para>RHEL7 / CentOS 7</para>

        <para><programlisting>$ cd /usr/share/nginx/html
</programlisting></para>
      </listitem>

      <listitem>
        <para>Debian 10</para>

        <para><programlisting>$ cd /var/www/html
</programlisting></para>
      </listitem>
    </itemizedlist>

    <para>2. ozconfig.xml 파일을 엽니다.</para>

    <para><programlisting>$ vi ozconfig.xml
</programlisting></para>

    <para>3. 다음과 같이 수정합니다.</para>

    <note>
      <para>localhost 부분은 도메인 혹은 ip로 변경하셔야 합니다.</para>
    </note>

    <para><programlisting>&lt;serviceInfo&gt;
&lt;browser&gt;
 &lt;preserveCache&gt;false&lt;/preserveCache&gt;
 &lt;/browser&gt;
 &lt;pageUrls&gt;
 &lt;execution&gt;http://localhost/eform/document/ozinoffice_view_service.html&lt;/execution&gt;
 &lt;download&gt;http://localhost/eform/form/list_form_oz.html&lt;/download&gt;
 &lt;upload&gt;http://localhost/eform/form/check_form_oz.html&lt;/upload&gt;
 &lt;propertyPane&gt;http://localhost/ozinoffice_pages/ozinoffice_prop_panel.html&lt;/propertyPane&gt;
 &lt;/pageUrls&gt;
 &lt;update&gt;
 &lt;addInVersion&gt;80.2020.0422.201&lt;/addInVersion&gt;
 &lt;productVersion&gt;19081901&lt;/productVersion&gt;
 &lt;downloadUrl&gt;http://localhost/development_tools/office/eformsign_form_builder.exe&lt;/downloadUrl&gt;
 &lt;/update&gt;
 &lt;ribbon&gt;
 &lt;documentInfo&gt;true&lt;/documentInfo&gt;
 &lt;/ribbon&gt;
&lt;/serviceInfo&gt;
</programlisting></para>
  </section>

  <section xml:id="license_config">
    <title>License 설정</title>

    <para>발급받은 license 파일이 존재하는 폴더로 이동하여, 다음과 같이 OS별로 라이선스를 설정합니다.</para>

    <itemizedlist>
      <listitem>
        <para>RHEL 7</para>

        <para><programlisting>$ cp ozlicense.xml eformsignlicense.xml /opt/tomcat/webapps/Service/WEB-INF/classes/
$ cp ozlicense.xml eformsignlicense.xml /opt/tomcat/webapps/Daemon/WEB-INF/classes/
$ cp ozlicense.xml /usr/share/nginx/html/plugins/ozhtml5/license/
$ cp ozuserservicelicense.xml /usr/share/nginx/html/
</programlisting></para>
      </listitem>

      <listitem>
        <para>CentOS 7</para>

        <para><programlisting>$ cp ozlicense.xml eformsignlicense.xml /var/lib/tomcat/webapps/Service/WEB-INF/classes/
$ cp ozlicense.xml eformsignlicense.xml /var/lib/tomcat/webapps/Daemon/WEB-INF/classes/
$ cp ozlicense.xml /usr/share/nginx/html/plugins/ozhtml5/license/
$ cp ozuserservicelicense.xml /usr/share/nginx/html/
</programlisting></para>
      </listitem>

      <listitem>
        <para>Debian 10</para>

        <para><programlisting>$ cp ozlicense.xml eformsignlicense.xml /opt/tomcat/latest/webapps/Service/WEB-INF/classes/
$ cp ozlicense.xml eformsignlicense.xml /opt/tomcat/latest/webapps/Daemon/WEB-INF/classes/
$ cp ozlicense.xml /var/www/html/plugins/ozhtml5/license/
$ cp ozuserservicelicense.xml /var/www/html/
</programlisting></para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="proxy_config">
    <title>프록시 설정</title>

    <section>
      <title>nginx 설정</title>

      <para>RHEL 7, CentOS 7에서는 default.conf 파일의 server{}부분을 수정하고, Debian
      10에서는 default 파일의 server{}부분을 수정합니다.</para>

      <para>1. default.conf 혹은 default 파일을 엽니다.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7 / CentOS 7</para>

          <para><programlisting>$ vi /etc/nginx/conf.d/default.conf</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ vi /etc/nginx/sites-available/defult</programlisting></para>
        </listitem>
      </itemizedlist>

      <para>2. 다음과 같이 수정합니다.</para>

      <para><itemizedlist>
          <listitem>
            <para>RHEL 7 / CentOS 7: default.conf 파일<indexterm
                class="singular">
                <primary>default.conf</primary>
              </indexterm></para>

            <para><programlisting>server {
listen 80;
server_name localhost;

#charset koi8-r;
#access_log /var/log/nginx/host.access.log main;

location / {
root /usr/share/nginx/html;
#index index.html index.htm;
index login_private.html;
}

location /Iam {
# forward all request headers to backend
proxy_pass_request_headers on;
# these settings come from the CouchDB wiki
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

root /usr/share/nginx/html;
index index.html index.htm;
proxy_pass http://localhost:8080/Iam;
}

location /Service {
# forward all request headers to backend
proxy_pass_request_headers on;
# these settings come from the CouchDB wiki
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

root /usr/share/nginx/html;
index index.html index.htm;
proxy_pass http://localhost:8080/Service;
}

location /Daemon {
# forward all request headers to backend
proxy_pass_request_headers on;
# these settings come from the CouchDB wiki
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

root /usr/share/nginx/html;
index index.html index.htm;
proxy_pass http://localhost:8080/Daemon;
}

#error_page 404 /404.html;

# redirect server error pages to the static page /50x.html
#</programlisting></para>
          </listitem>

          <listitem>
            <para>Debian 10: default 파일<indexterm class="singular">
                <primary>default 파일</primary>
              </indexterm></para>

            <para><programlisting>server {

....

    location / {

        #index index.html index.htm;
        index login_private.html;

    }

    location /Iam {
        # forward all request headers to backend
        proxy_pass_request_headers on;
        # these settings come from the CouchDB wiki
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        index index.html index.htm;
        proxy_pass http://localhost:8080/Iam;
    }

    location /Service {
        # forward all request headers to backend
        proxy_pass_request_headers on;
        # these settings come from the CouchDB wiki
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        index index.html index.htm;
        proxy_pass http://localhost:8080/Service;
    }

    location /Daemon {
        # forward all request headers to backend
        proxy_pass_request_headers on;
        # these settings come from the CouchDB wiki
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        index index.html index.htm;
        proxy_pass http://localhost:8080/Daemon;

    }

...</programlisting></para>
          </listitem>
        </itemizedlist></para>

      <para/>

      <para/>
    </section>

    <section>
      <title>tomcat 설정</title>

      <para>1. tomcat 내 server.xml 파일을 엽니다.</para>

      <itemizedlist>
        <listitem>
          <para>RHEL 7 / CentOS 7</para>

          <para><programlisting>$ vi /opt/tomcat/conf/server.xml </programlisting></para>
        </listitem>

        <listitem>
          <para>CentOS 7</para>

          <para><programlisting>$ vi /etc/tomcat/server.xml</programlisting></para>
        </listitem>

        <listitem>
          <para>Debian 10</para>

          <para><programlisting>$ vi /opt/tomcat/latest/conf/server.xml</programlisting></para>
        </listitem>
      </itemizedlist>

      <para>2. server.xml<indexterm class="singular">
          <primary>server.xml</primary>
        </indexterm> 파일을 다음과 같이 수정합니다.</para>

      <para><programlisting>&lt;Host name="localhost" appBase="webapps"

unpackWARs="true" autoDeploy="true"&gt;

&lt;Context docBase="Iam" path="/Iam"/&gt;
&lt;Context docBase="Service" path="/Service"/&gt;
&lt;Context docBase="Daemon" path="/Daemon" /&gt;
&lt;!-- SingleSignOn valve, share authentication between web applications
Documentation at: /docs/config/valve.html --&gt;
&lt;!--
&lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;
--&gt;

&lt;!-- Access log processes all example.
Documentation at: /docs/config/valve.html
Note: The pattern used is equivalent to using pattern="common" --&gt;
&lt;Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
prefix="localhost_access_log" suffix=".txt"
pattern="%h %l %u %t &amp;quot;%r&amp;quot; %s %b" /&gt;
&lt;/Host&gt;</programlisting></para>

      <para/>
    </section>
  </section>

  <section xml:id="execute_config">
    <title>GZIP 설정</title>

    <para>1. nginx 내 nginx.conf 파일을 엽니다.</para>

    <programlisting>$ vi /etc/nginx/nginx.conf</programlisting>

    <para>2. nginx.conf 파일을 다음과 같이 수정합니다.</para>

    <programlisting>...
http {
...
    gzip on;
gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/html text/plain text/css application/json application/javascript text/xml;
    client_max_body_size 100M;
...
}
</programlisting>
  </section>

  <section xml:id="execute_config">
    <title>기동 설정</title>

    <para>Service, Daemon, Iam 서버가 정상적으로 설치 및 설정되었는지 확인합니다.</para>

    <section>
      <title>서버 실행</title>

      <para>각 서버를 실행합니다.</para>

      <para><programlisting>Service nginx start
Service couchdb start
Service tomcat start
</programlisting></para>
    </section>

    <section>
      <title>Service</title>

      <para>웹 브라우저에 IP 주소/Service를 입력하여 다음의 실행 결과가 표시되는지 확인합니다.</para>

      <para><programlisting>{"Service Name":"Service","eformsign version":"10,2020,0429,300","Viewer version":"80,2020,0422,201","Server version":"80,2020,0422,1510","Cpu Count":"any","IP List":"any","Request URL":"any",
"Expire Date":"2021-05-01"}
</programlisting></para>
    </section>

    <section>
      <title>Daemon</title>

      <para>웹 브라우저에 IP 주소/Daemon를 입력하여 다음의 실행 결과가 표시되는지 확인합니다.</para>

      <para><programlisting>{"Service Name":"Service","eformsign version":"10,2020,0429,300","Viewer version":"80,2020,0422,201","Server version":"80,2020,0422,1510","Cpu Count":"any","IP List":"any","Request URL":"any",
"Expire Date":"2021-05-01"}
</programlisting></para>
    </section>

    <section>
      <title>Iam</title>

      <para>웹 브라우저에 IP 주소/Iam을 입력하고 Iam 로그인 페이지가 표시되는지 확인합니다.</para>

      <para/>
    </section>
  </section>
</chapter>
